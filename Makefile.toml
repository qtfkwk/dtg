[config]
default_to_workspace = false

[tasks.default]
alias = "fast"

[tasks.fast]
dependencies = ["build", "test", "clippy", "doc"]

[tasks.all]
dependencies = ["check", "fast"]

[tasks.full]
dependencies = ["all", "bench"]

[tasks.rebuild]
dependencies = ["clean", "dep", "all"]

[tasks.check]
alias = "my-check"

[tasks.my-check]
dependencies = ["outdated", "audit"]

[tasks.update]
script = '''
cargo upgrade --incompatible
cargo update
'''

[tasks.outdated]
alias = "my-outdated"

[tasks.my-outdated]
script = '''
cargo outdated --exit-code 1
'''

[tasks.audit]
alias = "my-audit"

[tasks.my-audit]
script = '''
cargo audit
'''

[tasks.prebuild]
script = '''
cargo build --release --color=always
'''

[tasks.readme]
dependencies = ["prebuild"]
script = '''
#!/usr/bin/env bash
set -xeo pipefail
kapow cli/t/README.md >cli/README.md
kapow cli/EXAMPLES.md >>cli/README.md
cat FORMATS.md >>cli/README.md
kapow lib/t/README.md >lib/README.md
cat lib/EXAMPLES.md >>lib/README.md
cat FORMATS.md >>lib/README.md
kapow t/README.md >README.md
sed -n $(($(grep -n '^# Examples$' cli/README.md |cut -d: -f1)+2)),\
$(($(grep -n '^# Formats$' cli/README.md |cut -d: -f1)-1))p cli/README.md >>README.md
echo -e "# Library\n" >>README.md
sed -n $(($(grep -n '^# Examples$' lib/README.md |cut -d: -f1)+2)),\
$(($(grep -n '^# Formats$' lib/README.md |cut -d: -f1)-1))p lib/README.md >>README.md
cat FORMATS.md >>README.md
'''

[tasks.build]
alias = "my-build"

[tasks.my-build]
dependencies = ["readme"]
script = '''
cargo build --release --color=always
'''

[tasks.test]
alias = "my-test"

[tasks.my-test]
script = '''
cargo test --release --color=always
'''

[tasks.test-verbose]
alias = "my-test-verbose"

[tasks.my-test-verbose]
script = '''
cargo test --release --color=always -- --nocapture --test-threads=1 2>&1 |less -R
'''

[tasks.watch]
script = '''
#!/bin/sh
ARGS="Cargo.toml README.template.md src config.yaml"
run() { echo "\`\`\`\n\$ $@"; $@; e=$?; echo "\`\`\`\n"; return $e; }
sum() { find ${ARGS} -type f |sort |xargs b3sum; }
build() { run date; RUST_BACKTRACE=0 run cargo test && run cargo make; }
echo; sum >.watch1; build; while true; do inotifywait -qqr ${ARGS}; sum >.watch2;
if ! diff .watch1 .watch2; then clear; build; fi; mv .watch2 .watch1; done
'''

[tasks.bench]
alias = "my-bench"

[tasks.my-bench]
script = '''
cargo bench
'''

[tasks.clippy]
alias = "my-clippy"

[tasks.my-clippy]
script = '''
cargo clippy --release --color=always -- -D clippy::all
'''

[tasks.doc]
script = '''
cargo doc --color=always --no-deps
'''

[tasks.clean]
alias = "my-clean"

[tasks.my-clean]
script = '''
cargo clean
rm -rf .watch1 .watch2
'''

[tasks.serve]
script = '''
#!/bin/sh
PORT=8080
while ! miniserve -vp $PORT .; do PORT=$((PORT+1)); done
'''

[tasks.install]
script = '''
cargo install --path cli
'''
